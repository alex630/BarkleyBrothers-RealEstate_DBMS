-- Generated by Oracle SQL Developer Data Modeler 4.0.0.833
--   at:        2014-05-03 16:58:06 EDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g

/*Create Tables*/

CREATE TABLE BRANCH_OFFICES
  (
    BRANCH_NAME VARCHAR2 (20) NOT NULL ,
    POBOX_NUM   VARCHAR2 (10) ,
    PHONE_NUM   VARCHAR2 (10) ,
    AGENT_ID    NUMBER (3)
  ) ;
COMMENT ON TABLE BRANCH_OFFICES
IS
  'BRANCH_OFFICES' ;
  COMMENT ON COLUMN BRANCH_OFFICES.AGENT_ID
IS
  'Manager of the branch office' ;
  ALTER TABLE BRANCH_OFFICES ADD CONSTRAINT BRANCH_OFFICES_PK PRIMARY KEY ( BRANCH_NAME ) ;

CREATE TABLE BUYERS
  (
    BUYER_ID  NUMBER (3) NOT NULL ,
    FNAME     VARCHAR2 (20) ,
    LNAME     VARCHAR2 (20) ,
    STREET    VARCHAR2 (30) ,
    CITY      VARCHAR2 (20) ,
    STATE     CHAR (2) ,
    ZIP_CODE  CHAR (5) ,
    PHONE_NUM VARCHAR2 (10) ,
    AGENT_ID  NUMBER (3)
  ) ;
COMMENT ON TABLE BUYERS
IS
  'BUYERS' ;
  ALTER TABLE BUYERS ADD CONSTRAINT BUYERS_PK PRIMARY KEY ( BUYER_ID ) ;

CREATE TABLE CONTACT_PERSONS
  (
    LNAME     VARCHAR2 (20) ,
    FNAME     VARCHAR2 (20) ,
    POSITION  VARCHAR2 (30) ,
    PHONE_NUM VARCHAR2 (10) ,
    SELLER_ID NUMBER (3) NOT NULL
  ) ;
COMMENT ON TABLE CONTACT_PERSONS
IS
  'CONTACT_PERSONS' ;
  ALTER TABLE CONTACT_PERSONS ADD CONSTRAINT CONTACT_PERSONS_PK PRIMARY KEY ( SELLER_ID ) ;

CREATE TABLE INT_BUYERS
  (
    REQUEST_NUM NUMBER (4) NOT NULL ,
    BUYER_ID    NUMBER (3) ,
    LIST_NUM    NUMBER (4) NOT NULL
  ) ;
COMMENT ON TABLE INT_BUYERS
IS
  'INTERESTED_BUYERS' ;
  ALTER TABLE INT_BUYERS ADD CONSTRAINT INT_BUYERS_PK PRIMARY KEY ( REQUEST_NUM ) ;

CREATE TABLE OFFERS
  (
    OFFER_NUM  NUMBER (4) NOT NULL ,
    LIST_NUM   NUMBER (4) ,
    AMOUNT     NUMBER (11,2) ,
    BUYER_ID   NUMBER (3) NOT NULL ,
    OFFER_DATE DATE
  ) ;
COMMENT ON TABLE OFFERS
IS
  'OFFERS' ;
  ALTER TABLE OFFERS ADD CONSTRAINT OFFERS_PK PRIMARY KEY ( OFFER_NUM ) ;

CREATE TABLE PROPERTIES
  (
    LIST_NUM     NUMBER (4) NOT NULL ,
    P_TYPE       VARCHAR2 (20) ,
    P_STREET     VARCHAR2 (30) ,
    CITY         VARCHAR2 (20) ,
    STATE        CHAR (2) ,
    ZIP_CODE     CHAR (5) ,
    ASKING_PRICE NUMBER (11,2) ,
    SELLER_ID    NUMBER (3) NOT NULL ,
    LIST_ON      DATE
  ) ;
COMMENT ON TABLE PROPERTIES
IS
  'PROPERTIES' ;
  ALTER TABLE PROPERTIES ADD CONSTRAINT PROPERTIES_PK PRIMARY KEY ( LIST_NUM ) ;

CREATE TABLE SALES_AGENTS
  (
    AGENT_ID       NUMBER (3) NOT NULL ,
    FNAME          VARCHAR2 (20) ,
    LNAME          VARCHAR2 (20) ,
    EXT_NUM        NUMBER (4) ,
    HOME_PHONE_NUM VARCHAR2 (10) ,
    BRANCH_NAME    VARCHAR2 (20)
  ) ;
COMMENT ON TABLE SALES_AGENTS
IS
  'SALES_AGENTS' ;
  ALTER TABLE SALES_AGENTS ADD CONSTRAINT SALES_AGENTS_PK PRIMARY KEY ( AGENT_ID ) ;

CREATE TABLE SELLERS
  (
    SELLER_ID NUMBER (3) NOT NULL ,
    S_NAME      VARCHAR2 (50) ,
    STREET    VARCHAR2 (30) ,
    CITY      VARCHAR2 (20) ,
    STATE     CHAR (2) ,
    ZIP_CODE  CHAR (5) ,
    PHONE_NUM VARCHAR2 (10) ,
    AGENT_ID  NUMBER (3) NOT NULL
  ) ;
COMMENT ON TABLE SELLERS
IS
  'SELLERS' ;
  ALTER TABLE SELLERS ADD CONSTRAINT SELLERS_PK PRIMARY KEY ( SELLER_ID ) ;

ALTER TABLE BUYERS ADD CONSTRAINT BUYERS_SALES_AGENTS_FK FOREIGN KEY ( AGENT_ID ) REFERENCES SALES_AGENTS ( AGENT_ID ) ;

ALTER TABLE CONTACT_PERSONS ADD CONSTRAINT CONTACT_PERSONS_SELLERS_FK FOREIGN KEY ( SELLER_ID ) REFERENCES SELLERS ( SELLER_ID ) ;

ALTER TABLE INT_BUYERS ADD CONSTRAINT INT_BUYERS_PROPERTIES_FK FOREIGN KEY ( LIST_NUM ) REFERENCES PROPERTIES ( LIST_NUM ) ;

ALTER TABLE OFFERS ADD CONSTRAINT OFFERS_BUYERS_FK FOREIGN KEY ( BUYER_ID ) REFERENCES BUYERS ( BUYER_ID ) ;

ALTER TABLE PROPERTIES ADD CONSTRAINT PROPERTIES_SELLERS_FK FOREIGN KEY ( SELLER_ID ) REFERENCES SELLERS ( SELLER_ID ) ;

ALTER TABLE SALES_AGENTS ADD CONSTRAINT SALES_AGENTS_BRANCH_OFFICES_FK FOREIGN KEY ( BRANCH_NAME ) REFERENCES BRANCH_OFFICES ( BRANCH_NAME ) ;

ALTER TABLE SELLERS ADD CONSTRAINT SELLERS_SALES_AGENTS_FK FOREIGN KEY ( AGENT_ID ) REFERENCES SALES_AGENTS ( AGENT_ID ) ;


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             0
-- ALTER TABLE                             15
-- CREATE VIEW                              0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

/*Insert Data into Tables*/

insert into BRANCH_OFFICES values ('Williamsburg','PO Box 122','433-0009',10);
insert into BRANCH_OFFICES values ('Elkton','PO Box 333','401-2222',30);
insert into BRANCH_OFFICES values ('Bridgewater','PO Box 566','322-0909',50);

insert into SALES_AGENTS values (10,'Jane','Smith',111,'433-1010','Williamsburg');
insert into SALES_AGENTS values (20,'Ellen','Davis',222,'434-2000','Williamsburg');
insert into SALES_AGENTS values (80,'Thomas','Pill',434,'403-7781','Williamsburg');
insert into SALES_AGENTS values (30,'Frank','Ramey',333,'401-7777','Elkton');
insert into SALES_AGENTS values (40,'Paul','Jones',444,'401-8010','Elkton');
insert into SALES_AGENTS values (50,'Alfred','Baker',555,'668-3011','Bridgewater');
insert into SALES_AGENTS values (60,'Mollie','Brown',666,'568-9021',null);
insert into SALES_AGENTS values (70,'Sarah','Parket',777,'401-8765',null);

insert into BUYERS values (500,'Gene','Guall','12 Oak La.','Elkton','VA','31102','401-5522',10);
insert into BUYERS values (510,'Bob','Smith','367 Divot','Elkton','VA','31102','401-2222',null);
insert into BUYERS values (520,'Ina','Ingle','266 Snowbird','Williamsburg','VA','22801','434-9999',60);
insert into BUYERS values (530,'Jill','Jenkins','1966 Westover','Williamsburg','VA','22801','434-0000',10);
insert into BUYERS values (540,'Kim','Kemper','399 Market','Bridgewater','VA','22900','434-1000',20);
insert into BUYERS values (550,'Jane','Johnston','456 Lakeview','Williamsburg','VA','22801','433-5555',70);
insert into BUYERS values (560,'Mike','Miller','872 Arrowhead','Williamsburg','VA','22801','434-3000',20);
insert into BUYERS values (570,'Nelson','Jones','126 E. Market','Williamsburg','VA','22801','433-4567',30);
insert into BUYERS values (580,'Polly','Paul','411 Duke','Bridgewater','VA','22900','434-1234',null);
insert into BUYERS values (590,'Bob','Smith','196 Phillips','Williamsburg','VA','22801','434-1122',60);
insert into BUYERS values (600,'Tom','Turk','888 Market','Bridgewater','VA','22900','434-3344',70);


insert into SELLERS values (1,'Al Able','500 Maple','Elkton','VA','31102','401-1111',10);
insert into SELLERS values (2,'Bob Bodkin','410 South','Williamsburg','VA','22801','433-2222',10);
insert into SELLERS values (3,'Dominion National Bank','314 N. Main','Williamsburg','VA','22801','433-3333',20);
insert into SELLERS values(4,'Bob Ellis','300 Westover','Williamsburg','VA','22801','433-5555',30);
insert into SELLERS values (5,'Jill Turner','105 Market','Bridgewater','VA','22900','322-6789',30);
insert into SELLERS values (6,'Paula Jones','902 Park','Bridgewater','VA','22900','322-9011',60);
insert into SELLERS values (7,'Tammy Miller','230 Mt. Clinton Pk','Williamsburg','VA','22801','568-0000',10);
insert into SELLERS values (8,'First National Bank','109 E. Main','Bridgewater','VA','22900','322-4444',20);

insert into CONTACT_PERSONS values ('Dike','Robert','Vice President','433-9922',3);
insert into CONTACT_PERSONS values ('Lamb','Laura','Loan Officer','433-3434', 8);

insert into properties values (101, 'Single Family', '104 South St.' , 'Williamsburg', 'VA', '22801', 210000,1,'05-DEC-03');
insert into properties values (102,	'Building Lot',	'200 E. Main,',		'Elkton',	'VA',	'31102',	  35000,2,'08-FEB-04');
insert into properties values (103,	'Single Family', 	'300 W. Market',		'Williamsburg',	'VA',	'22801',	200000,3,'05-JAN-04');
insert into properties values (104,	'Single Family', 	'400 N. Maple',		'Elkton',	'VA',	'31102',	175500,8,'16-MAR-04');
insert into properties values (105,	'Condo',	'500 E. Oak',		'Elkton'	,'VA'	,'31102',	305600,8,'05-DEC-03');
insert into properties values (106,	'Building Lot', 	'600 N. Dogwood',		'Williamsburg',	'VA'	,'22801',	  32000,3,'15-FEB-04');
insert into properties values (107,	'Single Family', 	'700 S. Crescent'	,	'Bridgewater'	,'VA'	,'22900',	225000,4,'03-APR-04');
insert into properties values (108,	'Condo', 	'800 Lakewood Dr',		'Elkton',	'VA','31102',	235000,8,'08-NOV-03');
insert into properties values (109,	'Single Family',	'419 Maple'	,	'Williamsburg',	'VA',	'22801'	,125500,3,'07-MAR-04');
insert into properties values (110,	'Townhouse',	'902 Park', 		'Bridgewater',	'VA',	'22900',	119000,6,'25-JAN-04');
insert into properties values (111,	'Townhouse',	'677 Market',		'Elkton',	'VA',	'31102',	115500,5,'12-MAR-04');
insert into properties values (112,	'Single Family',	'230 Mt. Clinton Pike',	'Williamsburg',	'VA',	'22801',	135500,7,'08-FEB-04');


insert into INT_BUYERS values (1,500,101);
insert into INT_BUYERS values (2,500,102);
insert into INT_BUYERS values (3,500,103);
insert into INT_BUYERS values (4,530,101);
insert into INT_BUYERS values (5,530,102);
insert into INT_BUYERS values (6,530,106);
insert into INT_BUYERS values (7,520,101);
insert into INT_BUYERS values (8,520,106);
insert into INT_BUYERS values (9,520,107);
insert into INT_BUYERS values (10,570,106);
insert into INT_BUYERS values (11,570,111);
insert into INT_BUYERS values (12,540,102);
insert into INT_BUYERS values (13,540,107);
insert into INT_BUYERS values (14,540,111);
insert into INT_BUYERS values (15,560,102);
insert into INT_BUYERS values (16,590,111);
insert into INT_BUYERS values (17,590,106);

insert into offers values (1,101,190000,530,'04-APR-04');
insert into offers values (2,102,32000,510,'11-APR-04');
insert into offers values (3,103,155000,540,'13-APR-04');
insert into offers values (4,101,201000,540,'12-APR-04');
insert into offers values (5,108,225000,530,'11-APR-04');
insert into offers values (6,106,29000,550,'04-APR-04');
insert into offers values (7,109,115550,550,'17-APR-04');
insert into offers values (8,101,195000,550,'06-APR-04');
insert into offers values (9,111,105000,560,'11-APR-04');
insert into offers values (10,108,200000,600,'12-APR-04');


/*History Trigger*/
CREATE TABLE PROPERTIES_HISTORY (
	list_num		NUMBER(4)		NOT NULL,
	p_type			VARCHAR2(20),
	ask_price		NUMBER(11,2),
	seller_id		NUMBER(3)		NOT NULL
);
/
CREATE OR REPLACE TRIGGER TRG_PROP_HIST
	BEFORE UPDATE OF asking_price, seller_id ON PROPERTIES
	FOR EACH ROW
BEGIN
	INSERT INTO PROPERTIES_HISTORY
	VALUES(:old.list_num, :old.p_type, :old.asking_price, :old.seller_id);
END;
/
/*End history trigger*/

/*Auditing Triggers*/
ALTER TABLE PROPERTIES ADD (created_by VARCHAR2(30) DEFAULT USER);/
ALTER TABLE PROPERTIES ADD (created_date DATE DEFAULT SYSDATE);/
ALTER TABLE PROPERTIES ADD (last_update_by VARCHAR2(30) DEFAULT USER);/
ALTER TABLE PROPERTIES ADD (last_update_date DATE DEFAULT SYSDATE);/
ALTER TABLE SELLERS ADD (created_by VARCHAR2(30) DEFAULT USER);/
ALTER TABLE SELLERS ADD (created_date DATE DEFAULT SYSDATE);/
ALTER TABLE SELLERS ADD (last_update_by VARCHAR2(30) DEFAULT USER);/
ALTER TABLE SELLERS ADD (last_update_date DATE DEFAULT SYSDATE);/
ALTER TABLE BUYERS ADD (created_by VARCHAR2(30) DEFAULT USER);/
ALTER TABLE BUYERS ADD (created_date DATE DEFAULT SYSDATE);/
ALTER TABLE BUYERS ADD (last_update_by VARCHAR2(30) DEFAULT USER);/
ALTER TABLE BUYERS ADD (last_update_date DATE DEFAULT SYSDATE);
/
CREATE OR REPLACE TRIGGER PROP_AUDIT_TRG
	BEFORE INSERT OR UPDATE ON PROPERTIES
	FOR EACH ROW
BEGIN
	:new.last_update_by := USER;
	:new.last_update_date := SYSDATE;
END;
/
CREATE OR REPLACE TRIGGER SELLERS_AUDIT_TRG
	BEFORE INSERT OR UPDATE ON SELLERS
	FOR EACH ROW
BEGIN
	:new.last_update_by := USER;
	:new.last_update_date := SYSDATE;
END;
/
CREATE OR REPLACE TRIGGER BUYERS_AUDIT_TRG
	BEFORE INSERT OR UPDATE ON BUYERS
	FOR EACH ROW
BEGIN
	:new.last_update_by := USER;
	:new.last_update_date := SYSDATE;
END;
/
/*end auditing triggers*/


/*Query 1*/
SELECT 		fname, lname, phone_num
FROM		BUYERS
ORDER BY	city, lname;
/

/*Query 2*/	
SELECT		p_type, p_street, city, asking_price
FROM		PROPERTIES
WHERE		p_type LIKE 'Single Family'
ORDER BY	asking_price;
/

/*Query 3*/
SELECT		p_type, AVG(asking_price) AS Average_Price
FROM		PROPERTIES
GROUP BY	p_type;
/

/*Query 4*/
SELECT		p_street, city, asking_price, amount AS Amount_Offered,
			(asking_price - amount) AS difference
FROM		PROPERTIES p, OFFERS o
WHERE		p.list_num = o.list_num
ORDER BY	p_street;
/

/*Query 5*/
SET serveroutput ON
DECLARE
	v_listnum	NUMBER(4) := '&List_number';
	CURSOR		c_list_cursor IS
	SELECT		lname, amount, s_name, p_street, asking_price
	FROM		OFFERS, BUYERS, PROPERTIES, SELLERS
	WHERE		OFFERS.list_num = v_listnum 	
				AND OFFERS.buyer_id = BUYERS.buyer_id
				AND OFFERS.list_num = PROPERTIES.list_num
				AND PROPERTIES.seller_id = SELLERS.seller_id
	ORDER BY	lname;
BEGIN
	dbms_output.put_line('Buyer'||'     '||'Offer'||'     '||'Seller'||
	'     '||'Street'||'          '||'Price');
	FOR my_record IN c_list_cursor
		LOOP
			dbms_output.put_line(my_record.lname||'  '||my_record.amount||'   '||
			my_record.s_name||'   '||my_record.p_street||'   '||
			my_record.asking_price);
		END LOOP;
END;
/

/*Query 6*/
VARIABLE b_byid NUMBER
DECLARE
	v_fname VARCHAR(20) := '&Buyer_first_name';
	v_lname VARCHAR(20) := '&Buyer_last_name';
BEGIN
	SELECT	buyer_id INTO :b_byid
	FROM 	BUYERS
	WHERE	fname = v_fname AND lname = v_lname;
END;
/
SELECT		lname, phone_num, p_street, asking_price, o.list_num
FROM		BUYERS b, PROPERTIES p, OFFERS o
WHERE		b.buyer_id = :b_byid AND b.buyer_id = o.buyer_id AND o.list_num = p.list_num
UNION
SELECT 		lname, phone_num, p_street, asking_price, ib.list_num
FROM 		BUYERS b, PROPERTIES p, INT_BUYERS ib
WHERE 		b.buyer_id = :b_byid AND b.buyer_id = ib.buyer_id AND ib.list_num = p.list_num
ORDER BY 	p_street;
/

/*Query 7*/
VARIABLE b_brname VARCHAR2
DECLARE
	v_brname VARCHAR2(20) := '&Branch_office_name';
BEGIN
	:b_brname := v_brname;
END;
/
SELECT		sa.lname Agent_name, p.p_street, p.city, p.state, o.amount, b.lname Buyer_name
FROM		SALES_AGENTS sa, PROPERTIES p, SELLERS s, OFFERS o, BUYERS b
WHERE 		branch_name = :b_brname AND sa.agent_id = s.agent_id AND s.seller_id = p.seller_id
			AND p.list_num = o.list_num AND o.buyer_id = b.buyer_id
ORDER BY 	p.p_street;
/

/*Query 8*/
CREATE VIEW PROP_OFFER AS
	SELECT	p.list_num, p.p_street, p.city, p.state, s.s_name seller, b.lname buyer
	FROM	PROPERTIES p, SELLERS s, OFFERS o, BUYERS b
	WHERE 	p.seller_id = s.seller_id AND p.list_num = o.list_num
			AND o.buyer_id = b.buyer_id;
/
CREATE VIEW ALL_PROP AS
	SELECT	p.list_num, p.p_street, p.city, p.state, s.s_name seller
	FROM 	PROPERTIES p, SELLERS s
	WHERE	p.seller_id = s.seller_id;
/
SELECT	ap.p_street, ap.city, ap.state, ap.seller, po.buyer
FROM 	ALL_PROP ap LEFT JOIN PROP_OFFER po ON po.list_num = ap.list_num;
/

/*Query 9*/
ALTER TABLE SALES_AGENTS ADD (reg_as VARCHAR(20) DEFAULT 'an agent');
/
ALTER TABLE BUYERS ADD (reg_as VARCHAR(20) DEFAULT 'a buyer');
/
ALTER TABLE SELLERS ADD (reg_as VARCHAR(20) DEFAULT 'a seller');
/
ALTER TABLE SELLERS ADD (fname VARCHAR(20));
/
SELECT		lname, fname, home_phone_num phone_num, reg_as FROM SALES_AGENTS
UNION
SELECT		lname, fname, phone_num, reg_as FROM BUYERS
UNION
SELECT 		s_name lname, fname, phone_num, reg_as FROM SELLERS
ORDER BY	lname;
/
ALTER TABLE SALES_AGENTS DROP COLUMN reg_as;
/
ALTER TABLE BUYERS DROP COLUMN reg_as;
/
ALTER TABLE SELLERS DROP COLUMN reg_as;
/
ALTER TABLE SELLERS DROP COLUMN fname;
/

/*Query 10*/
SELECT 		lname, home_phone_num, sa.branch_name, pobox_num
FROM 		SALES_AGENTS sa LEFT JOIN BRANCH_OFFICES bo
			ON sa.branch_name = bo.branch_name
ORDER BY 	branch_name, lname;
/

/*Query 11*/
INSERT INTO BRANCH_OFFICES VALUES('Independent', '', '', '');
/
UPDATE	SALES_AGENTS
SET 	branch_name = 'Independent'
WHERE	agent_id = 60;
/
UPDATE	SALES_AGENTS
SET 	branch_name = 'Independent'
WHERE 	agent_id = 70;
/
SELECT		bo.branch_name, AVG(asking_price) Average_price_per_branch
FROM 		BRANCH_OFFICES bo, SALES_AGENTS sa, SELLERS s, PROPERTIES p
WHERE 		bo.branch_name = sa.branch_name
			AND sa.agent_id = s.agent_id
			AND s.seller_id = p.seller_id
			AND p_type NOT IN ('Building Lot')
GROUP BY	bo.branch_name
ORDER BY	bo.branch_name;
/
COMMIT;
/

/*Query 12*/
VARIABLE b_amount NUMBER
DECLARE
	v_amount NUMBER(12,3) := '&House_amount';
BEGIN
	:b_amount := v_amount;
END;
/
SELECT		p_street, p.city, asking_price, s_name seller
FROM		PROPERTIES p, SELLERS s
WHERE		p.seller_id = s.seller_id
			AND asking_price <= :b_amount + 20000
			AND asking_price >= :b_amount - 20000
ORDER BY	p_street;
/

/*Query 13*/
VARIABLE b_name VARCHAR2
DECLARE
	v_name VARCHAR2(20) := '&Contact_last_name';
BEGIN
	:b_name := v_name;
END;
/
SELECT		s_name seller, p.list_num, p_street
FROM		PROPERTIES p, SELLERS s, CONTACT_PERSONS cp
WHERE		cp.seller_id = s.seller_id
			AND p.seller_id = s.seller_id
			AND cp.lname = :b_name
ORDER BY	p.list_num;
/

/*Query 14*/
CREATE TABLE agents_no_offers AS
	SELECT	DISTINCT sa.agent_id, sa.lname agent_lname, sa.fname agent_fname, b.lname
			buyer_lname, b.fname buyer_name
	FROM	SALES_AGENTS sa, BUYERS b, OFFERS o
	WHERE	branch_name = 'Independent'
			AND sa.agent_id = b.agent_id
			AND b.buyer_id NOT IN (SELECT buyer_id FROM OFFERS);
/
ALTER TABLE agents_no_offers ADD(offer_amount NUMBER(11,2));
/
ALTER TABLE agents_no_offers ADD(property_street VARCHAR2(30));
/
SELECT 		agent_lname, agent_fname, buyer_lname, buyer_name, offer_amount, property_street
FROM		agents_no_offers
UNION
SELECT		sa.lname agent_lname, sa.fname agent_fname, b.lname buyer_lname,
			b.fname buyer_name, amount offer_amount, p_street property_street
FROM		SALES_AGENTS sa, BUYERS b, OFFERS o, PROPERTIES p
WHERE		branch_name = 'Independent'
			AND sa.agent_id = b.agent_id
			AND b.buyer_id = o.buyer_id
			AND o.list_num = p.list_num
ORDER BY	agent_lname, agent_fname, buyer_lname, buyer_name;
/
DROP TABLE	agents_no_offers;
/

/*Query 15*/
VARIABLE b_listnum NUMBER
DECLARE
	v_listnum NUMBER(4) := '&List_number';
BEGIN
	:b_listnum := v_listnum;
END;
/
SELECT		seller, seller_agent, offer, buyer, buyer_agent
FROM		(SELECT p.list_num lst_nu, s_name seller, sa.lname seller_agent 
			 FROM PROPERTIES p, SELLERS s, SALES_AGENTS sa 
			 WHERE p.list_num = :b_listnum AND p.seller_id = s.seller_id
			 AND s.agent_id = sa.agent_id)
			FULL JOIN
			(SELECT o.list_num lst_nu, amount offer, b.lname buyer, sa.lname buyer_agent
			FROM OFFERS o, BUYERS b, SALES_AGENTS sa 
			WHERE o.list_num = :b_listnum AND o.buyer_id = b.buyer_id 
			AND b.agent_id = sa.agent_id)
			USING (lst_nu)
ORDER BY 	buyer_agent, buyer;
/

/*Report 1*/
SELECT		list_num, p_street, p.city, p.state, p.zip_code,
			asking_price, s_name Seller, sa.lname Ag_name
FROM		PROPERTIES p, SELLERS s, SALES_AGENTS sa
WHERE		p.seller_id = s.seller_id
			AND s.agent_id = sa.agent_id
ORDER BY	sa.lname, s_name, list_num;
/

/*Report 2*/
CREATE VIEW PROP_CP AS
	SELECT		p.list_num list_n, p_street address, asking_price price,
				s_name seller, sa.lname ag_lname
	FROM		PROPERTIES p, SELLERS s, SALES_AGENTS sa
	WHERE		p.seller_id = s.seller_id
				AND s.agent_id = sa.agent_id
	ORDER BY	p.list_num;
/
CREATE VIEW OFF_CP AS
	SELECT		o.list_num list_n, b.lname buyer, amount offer
	FROM		OFFERS o, BUYERS b
	WHERE		o.buyer_id = b.buyer_id
	ORDER BY	o.list_num;
/
SELECT		pc.list_n, address, price, seller, ag_lname, buyer, offer
FROM		PROP_CP pc, OFF_CP oc
WHERE		pc.list_n = oc.list_n
ORDER BY	ag_lname;
/
SELECT		COUNT(list_n) num_of_prop, ag_lname
FROM		PROP_CP
GROUP BY	ag_lname
ORDER BY	ag_lname;
/
SELECT		ag_lname, SUM(price) Total_asking_prices
FROM		PROP_CP
GROUP BY	ag_lname
ORDER BY	ag_lname;
/
SELECT		ag_lname, COUNT(offer) Num_of_offers
FROM		PROP_CP pc, OFF_CP oc
WHERE		pc.list_n = oc.list_n
GROUP BY	ag_lname
ORDER BY	ag_lname;
/










